#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Pretty summary of what's going on in the queue.

"""

import getpass
import re
import sys
from os.path import dirname, realpath
import json

import numpy as np

# Put the parent directory first in the path
sys.path.insert(1, dirname(dirname(realpath(__file__))))
from wsge.sqstat import qstatf, squeuef
from wsge.sqstat import squeuef_local, sinfof_local


def numeric_sort(name):
    """
    Pull all digits from the name and make a list with all number in it.
    """
    return [int(x) for x in re.findall(r'[0-9]+', name)]


def main():
    """
    Read in qstat output and generate an overview of the cluster. Prints
    directly to the screen.

    :return: Nothing
    """

    squeue = squeuef_local()
    sinfo = sinfof_local()
    cluster="gpsc5"
    users = {}
    node_data = {}

    for info in sinfo[cluster]['sinfo']:
        node_name = info['nodes']['nodes'][0]
        #print(json.dumps(info, sort_keys=True, indent=4, separators=(',', ': ')))
        gpus_string = info['gres']['total']
        gpu_name = None
        gpu_count = 0
        if (gpus_string):
            gpus_list = re.split(r'[:()\s]+', gpus_string)
            
            sockets = re.search(r'\((.*?)\)',gpus_string).group(1)

            gpu_name = gpus_list[1]
            gpu_count = int(gpus_list[2])
        node_data[node_name] = {'memory': info['memory']['maximum'],
                                'memory_used': info['memory']['allocated'],
                                'cpu_count': info['cpus']['total'],
                                'cpu_used': info['cpus']['allocated'],
                                'cpu_idle': info['cpus']['idle'],
                                'core_count': info['cores']['maximum'],
                                'gpu_name': gpu_name,
                                'gpu_count': gpu_count,
        }
    for job in squeue[cluster]['jobs']:
    #    print(f"user name: {job['user_name']}")
    #    print(f"tasks per node: {job['tasks_per_node']}")
    #    print(f"tasks: {job['tasks']}")
    #    print(f"nodes: {job['nodes']}")
        users.setdefault(job['user_name'], 0)
        ntasks = job['tasks']['number']
        users[job['user_name']] += ntasks
        # present as a list but I only see one entry..
        state = job['job_state'][0]
        if state == "RUNNING":
        
            #print(job.keys())
            resources = job['job_resources']['nodes']
            #if resources['count'] == 1:
            #    continue
            names = resources['list']
            #if names != "ib14gpu-003":
            #    continue
            # GPU details are not explicit.
            #print(json.dumps(job, sort_keys=True, indent=4, separators=(',', ': ')))
            for gpus_string in job['gres_detail']:
            
                name_qty = re.sub(r'\([^)]*\)', '', gpus_string)
                gpu_name = name_qty.split(":")[1]
                n_gpus = int(name_qty.split(":")[-1])
                gpu_idx = re.search(r'\((.*?)\)',gpus_string).group(1).split(":")[-1]
                gpu_range = []
                for i in gpu_idx.split(','):
                    rangesplit = i.split("-")
                    if len(rangesplit) == 1:
                        gpu_range.append(int(rangesplit[0]))
                    else:
                        range_i = [int(j) for j in rangesplit]
                        range_i[-1] += 1
                        gpu_range += list(range(*range_i))
                print(gpus_string, gpu_range, len(gpu_range) == n_gpus) 
            #print(json.dumps(job, sort_keys=True, indent=4, separators=(',', ': ')))
            #print(f"tres per node: {job['tres_per_node']}")
            #for i in resources['allocation']:
                #print(i['index'], i['name'],  i['cpus']['count'], i['cpus']['used'])
            #    for socket in i['sockets']:
            #        print(f"socket: {socket['index']}")
            #        for core in socket['cores']:
            #            print(f"core: {core['index']} status: {core['status'][0]}")


            #sys.exit()

            # {'select_type': ['CORE'], 'nodes': {'count': 1, 'select_type': ['ONE_ROW'], 'list': 'ib14be-128', 'whole': False, 'allocation': [{'index': 0, 'name': 'ib14be-128', 'cpus': {'count': 48, 'used': 0}, 'memory': {'used': 0, 'allocated': 348960}, 'sockets': [{'index': 0, 'cores': [{'index': 0, 'status': ['ALLOCATED']}, {'index': 1, 'status': ['ALLOCATED']}, {'index': 2, 'status': ['ALLOCATED']}, {'index': 3, 'status': ['ALLOCATED']}, {'index': 4, 'status': ['ALLOCATED']}, {'index': 5, 'status': ['ALLOCATED']}, {'index': 6, 'status': ['ALLOCATED']}, {'index': 7, 'status': ['ALLOCATED']}, {'index': 8, 'status': ['ALLOCATED']}, {'index': 9, 'status': ['ALLOCATED']}, {'index': 10, 'status': ['ALLOCATED']}, {'index': 11, 'status': ['ALLOCATED']}, {'index': 12, 'status': ['ALLOCATED']}, {'index': 13, 'status': ['ALLOCATED']}, {'index': 14, 'status': ['ALLOCATED']}, {'index': 15, 'status': ['ALLOCATED']}, {'index': 16, 'status': ['ALLOCATED']}, {'index': 17, 'status': ['ALLOCATED']}, {'index': 18, 'status': ['ALLOCATED']}, {'index': 19, 'status': ['ALLOCATED']}, {'index': 20, 'status': ['ALLOCATED']}, {'index': 21, 'status': ['ALLOCATED']}, {'index': 22, 'status': ['ALLOCATED']}, {'index': 23, 'status': ['ALLOCATED']}, {'index': 24, 'status': ['ALLOCATED']}, {'index': 25, 'status': ['ALLOCATED']}, {'index': 26, 'status': ['ALLOCATED']}, {'index': 27, 'status': ['ALLOCATED']}, {'index': 28, 'status': ['ALLOCATED']}, {'index': 29, 'status': ['ALLOCATED']}, {'index': 30, 'status': ['ALLOCATED']}, {'index': 31, 'status': ['ALLOCATED']}]}, {'index': 1, 'cores': [{'index': 0, 'status': ['ALLOCATED']}, {'index': 1, 'status': ['ALLOCATED']}, {'index': 2, 'status': ['ALLOCATED']}, {'index': 3, 'status': ['ALLOCATED']}, {'index': 4, 'status': ['ALLOCATED']}, {'index': 5, 'status': ['ALLOCATED']}, {'index': 6, 'status': ['ALLOCATED']}, {'index': 7, 'status': ['ALLOCATED']}, {'index': 8, 'status': ['ALLOCATED']}, {'index': 9, 'status': ['ALLOCATED']}, {'index': 10, 'status': ['ALLOCATED']}, {'index': 11, 'status': ['ALLOCATED']}, {'index': 12, 'status': ['ALLOCATED']}, {'index': 13, 'status': ['ALLOCATED']}, {'index': 14, 'status': ['ALLOCATED']}, {'index': 15, 'status': ['ALLOCATED']}, {'index': 16, 'status': ['UNALLOCATED']}, {'index': 17, 'status': ['UNALLOCATED']}, {'index': 18, 'status': ['UNALLOCATED']}, {'index': 19, 'status': ['UNALLOCATED']}, {'index': 20, 'status': ['UNALLOCATED']}, {'index': 21, 'status': ['UNALLOCATED']}, {'index': 22, 'status': ['UNALLOCATED']}, {'index': 23, 'status': ['UNALLOCATED']}, {'index': 24, 'status': ['UNALLOCATED']}, {'index': 25, 'status': ['UNALLOCATED']}, {'index': 26, 'status': ['UNALLOCATED']}, {'index': 27, 'status': ['UNALLOCATED']}, {'index': 28, 'status': ['UNALLOCATED']}, {'index': 29, 'status': ['UNALLOCATED']}, {'index': 30, 'status': ['UNALLOCATED']}, {'index': 31, 'status': ['UNALLOCATED']}]}]}]}, 'cpus': 48, 'threads_per_core': {'set': False, 'infinite': False, 'number': 0}}
    print(users)
    sinfo = sinfof_local()
    sys.exit()

    all_queues, users, _jobs = qstatf()
    # Setup how people's jobs look:
    usercodes = {}
    for user_id, user in enumerate(users, start=1):
        usercodes[user] = "\033[38;5;%im" % user_id

    # Make current user always look the same
    usercodes[getpass.getuser()] = "\033[104;39;1m"

    ##
    # Output
    ##

    # Make a screen to manipulate since things are in columns
    width = 120
    height = 42
    screen = np.array([[" " for _ in range(width)] for _ in range(height)],
                      dtype='U36')
    # Column variables
    max_head = 7
    lcolumn = 0
    row = 0
    max_line_length = 0

    ##
    # Cluster usage info
    ##

    used, available, total = 0, 0, 0

    # all_queries lists jobs by node
    # sinfo doesn't have job info, just lists all the nodes and cpus used.
    # squeue has jobs
    for node in sorted(all_queues, key=numeric_sort):

        # move to next column at certain nodes
        if node in ['compute-4-0', 'compute-7-0']:
            row = 0
            lcolumn += max_line_length + 2
            max_line_length = 0

        total += all_queues[node]['slots_total']
        # prune out 'compute-' to make it more compact
        nline = list("%*s " % (max_head, node.replace('compute-', ''))) + ['[']
        nusers = []
        njobs = all_queues[node]
        for job_info in njobs['job_list']:
            used += job_info['slots']
            if job_info['slots'] > 1:
                for _slot in range(job_info['slots']):
                    nusers.append((job_info['JB_owner'], 'P'))
            else:
                nusers.append((job_info['JB_owner'], 'S'))

        for user, pcode in nusers:
            if pcode == 'P':
                nline.append("%s=\033[0m" % usercodes[user])
            else:
                nline.append("%s+\033[0m" % usercodes[user])

        for _empty in range(all_queues[node]['slots_total'] - len(nusers)):
            if 'state' in all_queues[node]:
                if 'u' in all_queues[node]['state']:
                    # Unreachable -- node is down!
                    nline.append('\033[1mu\033[0m')
                elif 'E' in all_queues[node]['state']:
                    # Taken offline by error state
                    nline.append('\033[1mE\033[0m')
                elif 'd' in all_queues[node]['state']:
                    # Node set as down
                    nline.append('\033[1md\033[0m')
                elif 'a' in all_queues[node]['state']:
                    # Alert but still running
                    nline.append('\033[1ma\033[0m')
            else:
                available += 1
                nline.append('\033[0m\033[42m \033[0m')

        # finish node
        nline.append('\033[0m]')

        nline = np.array(nline, dtype='U36')
        screen[row, lcolumn:lcolumn+len(nline)] = nline

        # increment all counters
        max_line_length = max(len(nline), max_line_length)
        row += 1

    ##
    # Cluster summary
    ##

    row = 0
    lcolumn += max_line_length + 4

    nline = list("%-12s  %5i" % ('used:', used))
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 1
    nline = list("%-12s  %5i" % ('available:', available))
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 1
    nline = list("%-12s  %5i" % ('total:', total))
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 2

    ##
    # Brief user info
    ##
    max_user_length = max(len(x) for x in users)

    header = list("%-*s  %-5s  %-5s  %-5s" %
                  (max_user_length, 'USER', 'r', 'q', 'h'))
    nline = np.array(header, dtype='U36')
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 1

    for user in sorted(users):
        states = {
            'h': 0,
            'q': 0,
            'r': 0
        }
        for job_info in users[user]:
            if 'h' in job_info['state']:
                states['h'] += job_info['slots']
            elif 'q' in job_info['state']:
                states['q'] += job_info['slots']
            elif 'r' in job_info['state']:
                states['r'] += job_info['slots']
            elif user == getpass.getuser():
                print("Bad job: %s" % job_info['JB_job_number'])
            else:
                # bad job for someone else
                pass

        nline = ["%s" % usercodes[user]]
        nline += list("%-*s  %-5i  %-5i  %-5i" % (max_user_length, user,
                                                  states['r'], states['q'],
                                                  states['h']))
        nline += ["\033[0m"]
        nline = np.array(nline, dtype='U36')
        screen[row, lcolumn:lcolumn+len(nline)] = nline
        row += 1

    lines = ("".join(x for x in line).rstrip() for line in screen)
    text = "\n".join(line for line in lines if line.strip())
    print(text)
    sys.stdout.flush()

if __name__ == '__main__':
    main()
