#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Pretty summary of what's going on in the queue.

"""

import getpass
import re
import sys
from os.path import dirname, realpath
import json
from collections import OrderedDict

import numpy as np

# Put the parent directory first in the path
sys.path.insert(1, dirname(dirname(realpath(__file__))))
from wsge.sqstat import qstatf, squeuef, sinfof
from wsge.sqstat import squeuef_local, sinfof_local


def numeric_sort(name):
    """
    Pull all digits from the name and make a list with all number in it.
    """
    return [int(x) for x in re.findall(r'[0-9]+', name)]


def replace_with_ranges(input_str):
    """For GPU IDXes"""
    numbers = sorted(map(int, input_str.split(',')))

    ranges = []
    start = numbers[0]
    end = numbers[0]

    for num in numbers[1:]:
        if num == end + 1:
            end = num
        else:
            if start == end:
                ranges.append(f"{start}")
            else:
                ranges.append(f"{start}-{end}")
            start = num
            end = num

    # Append the last range
    if start == end:
        ranges.append(f"{start}")
    else:
        ranges.append(f"{start}-{end}")

    return ','.join(ranges)


def main():
    """
    Read in qstat output and generate an overview of the cluster. Prints
    directly to the screen.

    :return: Nothing
    """

    #squeue = squeuef_local()
    #sinfo = sinfof_local()
    squeue = squeuef()
    sinfo = sinfof()
    cluster="gpsc7"
    users = OrderedDict()
    node_data = {}

    for job in squeue[cluster]['jobs']:
        users.setdefault(job['user_name'], 0)
    usercodes = {}
    for user_id, user in enumerate(users, start=1):
        # can't get black!
        user_id = user_id%15 
        usercodes[user] = "\033[38;5;%im" % user_id

    # Make current user always look the same
    usercodes[getpass.getuser()] = "\033[104;39;1m"

    resource_list = {}
    resource_desc = {}
    resource_gpu = {}
    resource_gpu_desc = {}
    for info in sinfo[cluster]['sinfo']:
        node_name = info['nodes']['nodes'][0]
        # cores_per_socket * n_sockets might be a more accurate way to determine CPU count.
        cores_per_socket = info['cores']['maximum']
        n_sockets = info['sockets']['maximum']
        n_cpus = int(cores_per_socket) * int(n_sockets)
        gpus_string = info['gres']['total']
        gpu_name = None
        gpu_count = 0
        if (gpus_string):
            #print(json.dumps(info, sort_keys=True, indent=4, separators=(',', ': ')))
            gpus_list = re.split(r'[:()\s]+', gpus_string)
            
            sockets = re.search(r'\((.*?)\)',gpus_string).group(1)

            gpu_name = gpus_list[1]
            gpu_count = int(gpus_list[2])
            resource_gpu.setdefault(node_name, {})
            resource_gpu_desc.setdefault(node_name, {})
            resource_gpu[node_name].setdefault(gpu_name, np.zeros(gpu_count, dtype=object))
            resource_gpu_desc[node_name].setdefault(gpu_name, np.zeros(gpu_count, dtype=object))


        node_data[node_name] = {'memory': info['memory']['maximum'],
                                'memory_used': info['memory']['allocated'],
                                'cpu_count': n_cpus, #info['cpus']['total'],
                                'cpu_used': info['cpus']['allocated'],
                                'cpu_idle': info['cpus']['idle'],
                                'core_count': info['cores']['maximum'],
                                'gpu_name': gpu_name,
                                'gpu_count': gpu_count,
        }
        resource_list.setdefault(node_name, np.zeros(n_cpus, dtype=object)) #info['cpus']['total'], dtype=object))
        resource_desc.setdefault(node_name, np.zeros(n_cpus, dtype=object)) #info['cpus']['total'], dtype=object))

    for job in squeue[cluster]['jobs']:
        users.setdefault(job['user_name'], 0)
        ntasks = job['tasks']['number']
        users[job['user_name']] += ntasks
        # present as a list but I only see one entry..
        state = job['job_state'][0]
        if state == "RUNNING":
        
            resources = job['job_resources']['nodes']
            names = resources['list']
            # GPU details are not explicit.
            #print(json.dumps(resources, sort_keys=True, indent=4, separators=(',', ': ')))
            # iterate through cpu resources
            node_names = []
            for r_node in resources['allocation']:
                r_node_name = r_node['name']
                node_names.append(r_node_name)
                # for some reason the gpus on gpsc7 have 256 cpus but 64 cores. Not sure what's going on there.
                cpu_max = node_data[r_node_name]['cpu_count']

                cores_array = resource_list[r_node_name]
                desc_array = resource_desc[r_node_name]
                offset = 0
                cpu_usage = 0
                usage_idx = []
                for socket in r_node['sockets']:
                    for core in socket['cores']:
                        idx = core['index']
                        if core['status'][0] == "ALLOCATED":
                            cores_array[offset] += 1
                            cpu_usage += 1
                            usage_idx.append(offset)
                        offset += 1
                if cpu_usage > 1:
                    desc_array[usage_idx] = f"{usercodes[job['user_name']]}=\033[0m"
                else:
                    desc_array[usage_idx] = f"{usercodes[job['user_name']]}+\033[0m"

            for gpuid, gpus_string in enumerate(job['gres_detail']):
                #print(json.dumps(job, sort_keys=True, indent=4, separators=(',', ': ')))
                name_qty = re.sub(r'\([^)]*\)', '', gpus_string)
                gpu_name = name_qty.split(":")[1]
                n_gpus = int(name_qty.split(":")[-1])
                gpu_idx = re.search(r'\((.*?)\)',gpus_string).group(1).split(":")[-1]
                gpu_range = []
                for i in gpu_idx.split(','):
                    rangesplit = i.split("-")
                    if len(rangesplit) == 1:
                        gpu_range.append(int(rangesplit[0]))
                    else:
                        range_i = [int(j) for j in rangesplit]
                        range_i[-1] += 1
                        gpu_range += list(range(*range_i))
                if len(gpu_range) == 1:
                    resource_gpu[node_names[gpuid]][gpu_name][gpu_range] += 1
                    resource_gpu_desc[node_names[gpuid]][gpu_name][gpu_range] = f"{usercodes[job['user_name']]}+\033[0m"
                else:
                    resource_gpu[node_names[gpuid]][gpu_name][gpu_range] += 1 
                    resource_gpu_desc[node_names[gpuid]][gpu_name][gpu_range] = f"{usercodes[job['user_name']]}=\033[0m"

                #print(gpus_string, gpu_range, len(gpu_range) == n_gpus) 
            #print(f"tres per node: {job['tres_per_node']}")
            #for i in resources['allocation']:
                #print(i['index'], i['name'],  i['cpus']['count'], i['cpus']['used'])
            #    for socket in i['sockets']:
            #        print(f"socket: {socket['index']}")
            #        for core in socket['cores']:
            #            print(f"core: {core['index']} status: {core['status'][0]}")


            #sys.exit()
    for node in sorted(resource_desc.keys()):
        cores_array = resource_list[node]
        empty_idx = np.where(cores_array == 0)
        desc_array = resource_desc[node]
        desc_array[empty_idx] = "\033[0m\033[42m \033[0m"
        used_cores = np.where(cores_array > 0)[0].shape[0]
        total_cores = cores_array.shape[0]
        print(f"{node:>15}: {''.join(desc_array)} ({used_cores} of {total_cores})")
        try:
            gpu_array = resource_gpu[node]
            for gpu_name in sorted(gpu_array.keys()):
                gpu_arr = gpu_array[gpu_name]
                gpu_desc_array = resource_gpu_desc[node][gpu_name]
                empty_idx = np.where(gpu_arr == 0)
                gpu_desc_array[empty_idx] = "\033[0m\033[42m \033[0m"
                used_gpus = np.where(gpu_arr > 0)[0].shape[0]
                total_gpus = gpu_arr.shape[0]
                print(f"{'╵---→  '+gpu_name:>30}: {''.join(gpu_desc_array)} ({used_gpus} of {total_gpus})")

        except KeyError:
            pass

    #print(users)
    max_gpu = 0
    min_gpu = 8
    total_free = 0
    for node in sorted(resource_gpu.keys()):
        for gpu_name in sorted(resource_gpu[node].keys()):
            gpu_arr = resource_gpu[node][gpu_name]
            empty_idx = np.where(gpu_arr == 0)
            n_empty = len(empty_idx[0])
            if (n_empty != 0):
                print(f"{node}:{gpu_name}:IDX({', '.join([str(i) for i in empty_idx[0]])})")
                max_gpu = n_empty if n_empty > max_gpu else max_gpu
                min_gpu = n_empty if n_empty < min_gpu else min_gpu
                total_free += n_empty

    print(f"Free GPUs = {total_free} ({min_gpu}, {max_gpu})")
    sys.exit()

    all_queues, users, _jobs = qstatf()
    # Setup how people's jobs look:
    usercodes = {}
    for user_id, user in enumerate(users, start=1):
        usercodes[user] = "\033[38;5;%im" % user_id

    # Make current user always look the same
    usercodes[getpass.getuser()] = "\033[104;39;1m"

    ##
    # Output
    ##

    # Make a screen to manipulate since things are in columns
    width = 120
    height = 42
    screen = np.array([[" " for _ in range(width)] for _ in range(height)],
                      dtype='U36')
    # Column variables
    max_head = 7
    lcolumn = 0
    row = 0
    max_line_length = 0

    ##
    # Cluster usage info
    ##

    used, available, total = 0, 0, 0

    # all_queries lists jobs by node
    # sinfo doesn't have job info, just lists all the nodes and cpus used.
    # squeue has jobs
    for node in sorted(all_queues, key=numeric_sort):

        # move to next column at certain nodes
        if node in ['compute-4-0', 'compute-7-0']:
            row = 0
            lcolumn += max_line_length + 2
            max_line_length = 0

        total += all_queues[node]['slots_total']
        # prune out 'compute-' to make it more compact
        nline = list("%*s " % (max_head, node.replace('compute-', ''))) + ['[']
        nusers = []
        njobs = all_queues[node]
        for job_info in njobs['job_list']:
            used += job_info['slots']
            if job_info['slots'] > 1:
                for _slot in range(job_info['slots']):
                    nusers.append((job_info['JB_owner'], 'P'))
            else:
                nusers.append((job_info['JB_owner'], 'S'))

        for user, pcode in nusers:
            if pcode == 'P':
                nline.append("%s=\033[0m" % usercodes[user])
            else:
                nline.append("%s+\033[0m" % usercodes[user])

        for _empty in range(all_queues[node]['slots_total'] - len(nusers)):
            if 'state' in all_queues[node]:
                if 'u' in all_queues[node]['state']:
                    # Unreachable -- node is down!
                    nline.append('\033[1mu\033[0m')
                elif 'E' in all_queues[node]['state']:
                    # Taken offline by error state
                    nline.append('\033[1mE\033[0m')
                elif 'd' in all_queues[node]['state']:
                    # Node set as down
                    nline.append('\033[1md\033[0m')
                elif 'a' in all_queues[node]['state']:
                    # Alert but still running
                    nline.append('\033[1ma\033[0m')
            else:
                available += 1
                nline.append('\033[0m\033[42m \033[0m')

        # finish node
        nline.append('\033[0m]')

        nline = np.array(nline, dtype='U36')
        screen[row, lcolumn:lcolumn+len(nline)] = nline

        # increment all counters
        max_line_length = max(len(nline), max_line_length)
        row += 1

    ##
    # Cluster summary
    ##

    row = 0
    lcolumn += max_line_length + 4

    nline = list("%-12s  %5i" % ('used:', used))
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 1
    nline = list("%-12s  %5i" % ('available:', available))
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 1
    nline = list("%-12s  %5i" % ('total:', total))
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 2

    ##
    # Brief user info
    ##
    max_user_length = max(len(x) for x in users)

    header = list("%-*s  %-5s  %-5s  %-5s" %
                  (max_user_length, 'USER', 'r', 'q', 'h'))
    nline = np.array(header, dtype='U36')
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 1

    for user in sorted(users):
        states = {
            'h': 0,
            'q': 0,
            'r': 0
        }
        for job_info in users[user]:
            if 'h' in job_info['state']:
                states['h'] += job_info['slots']
            elif 'q' in job_info['state']:
                states['q'] += job_info['slots']
            elif 'r' in job_info['state']:
                states['r'] += job_info['slots']
            elif user == getpass.getuser():
                print("Bad job: %s" % job_info['JB_job_number'])
            else:
                # bad job for someone else
                pass

        nline = ["%s" % usercodes[user]]
        nline += list("%-*s  %-5i  %-5i  %-5i" % (max_user_length, user,
                                                  states['r'], states['q'],
                                                  states['h']))
        nline += ["\033[0m"]
        nline = np.array(nline, dtype='U36')
        screen[row, lcolumn:lcolumn+len(nline)] = nline
        row += 1

    lines = ("".join(x for x in line).rstrip() for line in screen)
    text = "\n".join(line for line in lines if line.strip())
    print(text)
    sys.stdout.flush()

if __name__ == '__main__':
    main()
