#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Pretty summary of what's going on in the queue.

"""

import getpass
import sys
from os.path import dirname, realpath

import numpy as np

# Put the parent directory first in the path
sys.path.insert(1, dirname(dirname(realpath(__file__))))
from wsge.qstat import qstatf


def numeric_sort(name):
    """
    Split the name into a tuple with the last two items as integers.
    """
    name = name.split('-')
    return int(name[-2]), int(name[-1])


def main():
    """
    Read in qstat output and generate an overview of the cluster. Prints
    directly to the screen.

    :return: Nothing
    """

    all_queues, users = qstatf()

    # Setup how people's jobs look:
    usercodes = {}
    for user_id, user in enumerate(users, start=1):
        usercodes[user] = "\033[38;5;%im" % user_id

    # Make current user always look the same
    usercodes[getpass.getuser()] = "\033[104;39;1m"

    ##
    # Output
    ##

    # Make a screen to manipulate since things are in columns
    width = 120
    height = 42
    screen = np.array([[" " for _i in range(width)] for _j in range(height)],
                      dtype='U36')
    # Column variables
    max_head = 7
    lcolumn = 0
    row = 0
    max_line_length = 0

    ##
    # Cluster usage info
    ##

    used, available, total = 0, 0, 0

    for node in sorted(all_queues, key=numeric_sort):

        # move to next column at certain nodes
        if node in ['compute-4-0', 'compute-7-0']:
            row = 0
            lcolumn += max_line_length + 2
            max_line_length = 0

        total += all_queues[node]['slots_total']
        # prune out 'compute-' to make it more compact
        nline = list("%*s " % (max_head, node.replace('compute-', ''))) + ['[']
        nusers = []
        njobs = all_queues[node]
        for job_info in njobs['job_list']:
            used += job_info['slots']
            if job_info['slots'] > 1:
                for _slot in range(job_info['slots']):
                    nusers.append((job_info['JB_owner'], 'P'))
            else:
                nusers.append((job_info['JB_owner'], 'S'))

        for user, pcode in nusers:
            if pcode == 'P':
                nline.append("%s=\033[0m" % usercodes[user])
            else:
                nline.append("%s+\033[0m" % usercodes[user])

        for _empty in range(all_queues[node]['slots_total'] - len(nusers)):
            if 'state' in all_queues[node]:
                if 'u' in all_queues[node]['state']:
                    # Unreachable -- node is down!
                    nline.append('\033[1mu\033[0m')
                elif 'E' in all_queues[node]['state']:
                    # Taken offline by error state
                    nline.append('\033[1mE\033[0m')
                elif 'd' in all_queues[node]['state']:
                    # Node set as down
                    nline.append('\033[1md\033[0m')
                elif 'a' in all_queues[node]['state']:
                    # Alert but still running
                    nline.append('\033[1ma\033[0m')
            else:
                available += 1
                nline.append('\033[0m\033[42m \033[0m')

        # finish node
        nline.append('\033[0m]')

        nline = np.array(nline, dtype='U36')
        screen[row, lcolumn:lcolumn+len(nline)] = nline

        # increment all counters
        max_line_length = max(len(nline), max_line_length)
        row += 1

    ##
    # Cluster summary
    ##

    row = 0
    lcolumn += max_line_length + 4

    nline = list("%-12s  %5i" % ('used:', used))
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 1
    nline = list("%-12s  %5i" % ('available:', available))
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 1
    nline = list("%-12s  %5i" % ('total:', total))
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 2

    ##
    # Brief user info
    ##
    max_user_length = max(len(x) for x in users)

    header = list("%-*s  %-5s  %-5s  %-5s" %
                  (max_user_length, 'USER', 'r', 'q', 'h'))
    nline = np.array(header, dtype='U36')
    screen[row, lcolumn:lcolumn+len(nline)] = nline
    row += 1

    for user in sorted(users):
        states = {
            'h': 0,
            'q': 0,
            'r': 0
        }
        for job_info in users[user]:
            if 'h' in job_info['state']:
                states['h'] += job_info['slots']
            elif 'q' in job_info['state']:
                states['q'] += job_info['slots']
            elif 'r' in job_info['state']:
                states['r'] += job_info['slots']
            elif user == getpass.getuser():
                print("Bad job: %s" % job_info['JB_job_number'])
            else:
                # bad job for someone else
                pass

        nline = ["%s" % usercodes[user]]
        nline += list("%-*s  %-5i  %-5i  %-5i" % (max_user_length, user,
                                                  states['r'], states['q'],
                                                  states['h']))
        nline += ["\033[0m"]
        nline = np.array(nline, dtype='U36')
        screen[row, lcolumn:lcolumn+len(nline)] = nline
        row += 1

    print("\n".join("".join(x for x in line).rstrip() for line in screen))
    sys.stdout.flush()

if __name__ == '__main__':
    main()
